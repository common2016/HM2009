library(devtools)
use_data_raw('reg')
use_package('matlab')
RSiteSearch('jacobian')
.Machine$double.eps
install.packages('pracma')
pracma::jacobian
f <- function(x) c(x[1]^2 + x[2]^2 - 1, sin(pi*x[1]/2) + x[2]^3)
CDJac <- function(f,x0,n){
# local eps, i, j, m, h, df, f1, f2, x1, x2, temp;
# local f:proc;
m <- rows(x0)
df <- matlab::zeros(n,m)
eps <- .Machine$double.eps^(1/3)
x1 <- x2 <- x0
for (i in 1:m){
if (x0[i] < 0){
h <- -eps*max(c(abs(x0[i]),1.0))
} else {
h <- eps*max(c(abs(x0[i]),1.0))
}
temp <- x0[i]
x1[i] <- temp + h
x2[i] <- temp - h
h <- x1[i]-temp # Trick to increase precision slightly, see Dennis and Schnabel (1983), p. 99
f1 <- f(x1)
f2 <- f(x2)
for (j in 1:n){
df[j,i]=(f1[j]-f2[j])/(2*h)
}
x1[i] <- x0[i]
x2[i] <- x0[i]
}
return(df)
}
CDJac(f,c(1,1),2)
CDJac <- function(f,x0,n){
# local eps, i, j, m, h, df, f1, f2, x1, x2, temp;
# local f:proc;
m <- length(x0)
df <- matlab::zeros(n,m)
eps <- .Machine$double.eps^(1/3)
x1 <- x2 <- x0
for (i in 1:m){
if (x0[i] < 0){
h <- -eps*max(c(abs(x0[i]),1.0))
} else {
h <- eps*max(c(abs(x0[i]),1.0))
}
temp <- x0[i]
x1[i] <- temp + h
x2[i] <- temp - h
h <- x1[i]-temp # Trick to increase precision slightly, see Dennis and Schnabel (1983), p. 99
f1 <- f(x1)
f2 <- f(x2)
for (j in 1:n){
df[j,i]=(f1[j]-f2[j])/(2*h)
}
x1[i] <- x0[i]
x2[i] <- x0[i]
}
return(df)
}
CDJac(f,c(1,1),2)
jacobian(f, c(1,1))
pracma::jacobian(f, c(1,1))
CDJac <- function(f,x0){
m <- length(x0)
n <- length(f(x0))
df <- matlab::zeros(n,m)
eps <- .Machine$double.eps^(1/3)
x1 <- x2 <- x0
for (i in 1:m){
if (x0[i] < 0){
h <- -eps*max(c(abs(x0[i]),1.0))
} else {
h <- eps*max(c(abs(x0[i]),1.0))
}
temp <- x0[i]
x1[i] <- temp + h
x2[i] <- temp - h
h <- x1[i]-temp # Trick to increase precision slightly, see Dennis and Schnabel (1983), p. 99
f1 <- f(x1)
f2 <- f(x2)
for (j in 1:n){
df[j,i]=(f1[j]-f2[j])/(2*h)
}
x1[i] <- x0[i]
x2[i] <- x0[i]
}
return(df)
}
CDJac(f,c(1,1),2)
CDJac(f,c(1,1))
RSiteSearch(LU)
RSiteSearch('LU')
install.packages('optR')
library(optR)
?LU.optR
example("LU.optR")
LU.optR(A,b)
library(optR)
LU.optR(A,b)
?optR::LUsplit
View(Z)
optR()
?optR
Z$beta
use_package('optR')
RSiteSearch('gradient')
RSiteSearch('gradient')
library(numDeriv)
?grad
use_package('numDeriv')
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
multiroot(f = ramsey,start = x0*0.2-0.1,k0 = 0.02, kT = 0, delta = 1)
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
multiroot(f = ramsey,start = x0*0.2-0.1,k0 = 0.02, kT = 0, delta = 1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey)
?multiroot
multiroot
plot
aa <- function(...){return(...)}
aa(a = 1)
aa <- function(...){return(list(...))}
aa(a = 1)
aa(a = 1, b= 3)
aa <- function(...){return(sum(...))}
aa(a = 1, b= 3)
?sum
aa(a = 1)
sum(1,2,3)
sum(1,2)
sum(1)
sum(1,2,3,na.rm = T)
sum(1,na.rm = T)
sum
?cor
aa <- function(...){return(cor(...))}
aa(x = 1:10, y = 2:11)
aa(x = 1:10, y = 2:11, method = 'spearman')
?jacobian
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
devtools::load_all()
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
any(is.na(df))
fx
dx
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
optR::optR(df,-fx, method = 'LU')
optR::optR(df,-fx, method = 'LU')$beta
ans <- optR::optR(df,-fx, method = 'LU')
View(ans)
ans <- optR::optR(df,-fx, method = 'LU')$beta
View(ans)
ans <- optR::optR(df,-fx, method = 'LU')$beta[[1]]
devtools::load_all()
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
.Machine$double.eps^(2/3)
devtools::load_all()
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
#   if MNR_Print;
# locate 4,2;
# ?"mStep= " mStep;
# locate 5,2;
# ?"Step1= " step1;
# endif;
if ((mstep <= 1) & (step1 < mstep)){
crit[1] <- 2
return(x1,crit)
}
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1, pTol = .Machine$double.eps^(2/3))
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
multiroot(f = ramsey,start = x0*0.2-0.1,k0 = 0.02, kT = 0, delta = 1)
rm(list = ls())
library(matlab)
library(rootSolve)
library(tidyverse)
library(ggplot2)
library(patchwork)
devtools::load_all()
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
# para setting
alpha <- 0.27
betax <- 0.994
tmax <- 60
x0 <- ones(tmax,1)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*10)
# draw
draw_root <- function(ans){
picdata <- data.frame(tt = 1:length(ans$root), k = ans$root)
return(ggplot(picdata, aes(x = tt, y = k)) + geom_line())
}
# 非线性方程组求解
# 解这样得方程组，初值得选择真是太重要了
# dfsane(par = as.numeric(x0)-0.3, fn = ramsey,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
l1 <- (bounds[,1]-x)/dx
l1
min(l1[l1 > 0])
s1 <- min(l1[l1 > 0])
l2 <- (bounds[,2]-x)/dx
s2 <- min(l2[l2 > 0])
s1 <- min(c(0.98*s1,0.98*s2,1))
devtools::load_all()
FixVMN2(x0 = x0-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
source('E:/17_HuaDong/learn/HM2009/RCode/R/ramsey3_1.R')
FixVMN2(x0 = x0-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
devtools::load_all()
FixVMN2(x0 = x0-0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0+0.1,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2,bounds = bounds, f = ramsey, k0 = 0.02, kT = 0, delta = 1)
multiroot(f = ramsey,start = x0*0.2-0.1,k0 = 0.02, kT = 0, delta = 1)
multiroot(f = ramsey,start = x0*0.2,k0 = 0.02, kT = 0, delta = 1)
FixVMN2(x0 = x0*0.2,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
multiroot(f = ramsey,start = x0,k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0*0.5,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0*2,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0*0.9,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0*0.7,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0*3,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0*0.1+2,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
multiroot(f = ramsey,start = x0,k0 = 4.4, kT = 0, delta = 0.011)
bounds <- data.frame(dw =ones(tmax,1)*0.01, up = ones(tmax,1)*30)
FixVMN2(x0 = x0*0.1+2,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
FixVMN2(x0 = x0,bounds = bounds, f = ramsey, k0 = 4.4, kT = 0, delta = 0.011)
multiroot(f = ramsey,start = x0,k0 = 4.4, kT = 0, delta = 0.011)
multiroot(f = ramsey,start = x0*0.2+2,k0 = 4.4, kT = 0, delta = 0.011)
check()
use_gpl3_license()
?use_gpl3_license
use_gpl3_license('Pu Chen')
check()
check()
document()
check()
check()
